Loops
===========
for -> Elements in a list
for element in list:
  print(element)

**Bad idea to change the iterable part of the loop while looping through it. Decrement/Increment problem


while -> as long as a condition is true
while True:
  print('INFINITY!')

**Provide an exit condition!

if-Else 
Allows conditional flow from user input or specific data values

break ->
Quit a loop before it completes (both for and while loops)

continue ->
Skip current interation

BOOL in and is and not
is does not check values, but checks if same object in memory (reference types versus )

in checks if a value is contained within a list

not 
Check if a value is contained within a list
can combine not with is and in: not in, is not!

!= is for value comparision

and / or -> use and / or to combine conditionals 
if age > 20 and age < 30:

Group conditionals
To group conditionals so they are interpreted correctly, use parenthesis
Ex.
name = 'Pepper'
if name == 'Pep' and (age>20 or age <30) WORKS -> FALSE

if name == 'Pep' and age > 20 and age < 30 -> True ?!?!? -> not strongly tied, the < 30 assesses as true

Loop Else
for and while loops can have an else clause after them, as an alternative to their behavior

RANGE function in for loop -> similar to for loop iterator form in JS
range(up to, excluding element, n- 1)

for i in range(5, 10) -> STarts at 5 goes to final value (non inclusivve)

fir i in range(5, 10, 2) -> stepwise motion in 2s through each interation
FLOATS DONT WORK ONLY POSITIVE AND NEGATIVE INTEGERS