Blockchain

Distributed data storage across many machines-> collection of containers (blocks) which are connected. Order of blocks matter.
Each block contains some data (much like an individual folder). Each block knows about what came before it.
Subfolders within blockchain is what is contained within block. Runs on multiple nodes (wallet)

A block can contain any type of data.

Multiple blocks exist in one blockchain.  Each block knows about the other (a hash/unique id. Same txt for 
same input).  The following block has this data from the preceding block.

Therefore, same input = same output. No other input leads to same hash

Cryptocurrency

Data you store in a block is a list of transactions, the coins transferred in the form of your Cryptocurrency
3 Core concepts: **WHO IS SENDING HOW MUCH TO WHOM**

Coins are transferred with transactions. Cant' be changed to other real currencies inside the blockchain.
Value of coin determined by the value the participants of the blockchain assign to it. What is willing 
to be paid for it in a real currency. (USD, EU).

Therefore, high volatility.

Coins created by mining ( a reward for the effort ) -> how new blocks are added, via new transactions. Adding
a new block to the blockchain. 

Distributed, secure data storage. Cryptocurrency is if the content is coins that are sent a to b

2. Diving into PY
REPL -> RedEvalPrintLoop
R 2+2
E ...
P 4
Loop --> back to start

DATA TYPES
Number -> INTEGER (34) and FLOAT (1.8679)
Booleans -> True/False
Strings -> Text (' or ")

ctrl + z to exit PY REPL

Integer -> can hold as big or small a number as supported by OS

int() converts value to an integer (how to avoid string concat)

Float always rounds down!

Float -> can hold as big or small a number as supported by OS
float() converts value to a float (how to avoid string concat)\

Integers and floats can be written with underscores as a means to conveniently format them, make themm
more readable! 1_000_000 

Operators
/ Division always results in a FLOAT
// is integer division that returns an integer, removing decimal place
** power of Operators
% modulus returns the remainder

*Multiply strings! Repeats the string the number of times specified
Ex. "Hello" * 5 = HelloHelloHelloHelloHello